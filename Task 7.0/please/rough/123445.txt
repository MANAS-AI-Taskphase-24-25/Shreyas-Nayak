/*

#include <climits>
#include <rclcpp/rclcpp.hpp>
#include <nav_msgs/msg/occupancy_grid.hpp>
#include <nav_msgs/msg/path.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <queue>
#include <vector>
#include <cmath>
#include <unordered_map>

struct AStarNode {
    int x, y, g, h;
    AStarNode(int x, int y, int g, int h) : x(x), y(y), g(g), h(h) {}

    int getF() const { return g + h; }
};


struct CompareNodes {
    bool operator()(const AStarNode& a, const AStarNode& b) {
        return a.getF() > b.getF();
    }
};

class AStarPathPlanner : public rclcpp::Node {
public:
    AStarPathPlanner() : Node("a_star_path_planner") {
        map_sub_ = this->create_subscription<nav_msgs::msg::OccupancyGrid>(
            "/map", 10, std::bind(&AStarPathPlanner::mapCallback, this, std::placeholders::_1));

        path_pub_ = this->create_publisher<nav_msgs::msg::Path>("/path", 10);
    }

private:
    rclcpp::Subscription<nav_msgs::msg::OccupancyGrid>::SharedPtr map_sub_;
    rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr path_pub_;
    nav_msgs::msg::OccupancyGrid::SharedPtr map_;
    std::vector<bool> grid_;
    int width_, height_;

    void mapCallback(const nav_msgs::msg::OccupancyGrid::SharedPtr map) {
        map_ = map;
        width_ = map_->info.width;
        height_ = map_->info.height;
        grid_.assign(map_->data.begin(), map_->data.end());
        runAStar();
    }

    void runAStar() {
        std::priority_queue<AStarNode, std::vector<AStarNode>, CompareNodes> openSet;
        std::unordered_map<int, int> came_from;

        int startX = 0, startY = 0, goalX = width_ - 1, goalY = height_ - 1;
        AStarNode startNode(startX, startY, 0, calculateHeuristic(startX, startY, goalX, goalY));
        openSet.push(startNode);

        std::vector<int> g_score(width_ * height_, INT_MAX);
        g_score[startY * width_ + startX] = 0;

        const int moves[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};

        while (!openSet.empty()) {
            AStarNode current = openSet.top();
            openSet.pop();

            if (current.x == goalX && current.y == goalY) {
                reconstructPathAndPublish(came_from, current.x, current.y);
                return;
            }

            for (const auto& move : moves) {
                int nextX = current.x + move[0], nextY = current.y + move[1];

                if (!isValidPosition(nextX, nextY)) continue;

                int nextIndex = nextY * width_ + nextX;
                int newG = g_score[current.y * width_ + current.x] + 1;

                if (newG < g_score[nextIndex]) {
                    g_score[nextIndex] = newG;
                    came_from[nextIndex] = current.y * width_ + current.x;
                    openSet.push(AStarNode(nextX, nextY, newG, calculateHeuristic(nextX, nextY, goalX, goalY)));
                }
            }
        }

        RCLCPP_WARN(this->get_logger(), "No valid path found.");
    }

    bool isValidPosition(int x, int y) const {
        return x >= 0 && x < width_ && y >= 0 && y < height_ && grid_[y * width_ + x] == 0;
    }

    int calculateHeuristic(int x, int y, int goalX, int goalY) {
        return std::abs(x - goalX) + std::abs(y - goalY);  // Manhattan distance (faster)
    }

    void reconstructPathAndPublish(const std::unordered_map<int, int>& came_from, int goalX, int goalY) {
        auto path_msg = std::make_shared<nav_msgs::msg::Path>();
        path_msg->header.stamp = this->now();
        path_msg->header.frame_id = "map";

        int index = goalY * width_ + goalX;
        while (came_from.find(index) != came_from.end()) {
            int x = index % width_;
            int y = index / width_;
            geometry_msgs::msg::PoseStamped pose_stamped;
            pose_stamped.header = path_msg->header;
            pose_stamped.pose.position.x = x * map_->info.resolution + map_->info.origin.position.x;
            pose_stamped.pose.position.y = y * map_->info.resolution + map_->info.origin.position.y;
            path_msg->poses.push_back(pose_stamped);

            index = came_from.at(index);
        }

        std::reverse(path_msg->poses.begin(), path_msg->poses.end());
        path_pub_->publish(*path_msg);

        RCLCPP_INFO(this->get_logger(), "Published path with %zu waypoints", path_msg->poses.size());
    }
};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<AStarPathPlanner>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}


*/



/*

#include <climits>
#include <rclcpp/rclcpp.hpp>
#include <nav_msgs/msg/occupancy_grid.hpp>
#include <nav_msgs/msg/path.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <queue>
#include <vector>
#include <unordered_map>
#include <cmath>

struct Node {
    int x, y, g, h;
    Node(int x, int y, int g, int h) : x(x), y(y), g(g), h(h) {}
    int getF() const { return g + h; }
};

struct CompareNode {
    bool operator()(const Node& a, const Node& b) {
        return a.getF() > b.getF();
    }
};

class AStarPlanner : public rclcpp::Node {
public:
    AStarPlanner() : Node("a_star_planner") {
        map_sub_ = this->create_subscription<nav_msgs::msg::OccupancyGrid>(
            "/map", 10, std::bind(&AStarPlanner::mapCallback, this, std::placeholders::_1));
        path_pub_ = this->create_publisher<nav_msgs::msg::Path>("/calculated_path", 10);
    }

private:
    rclcpp::Subscription<nav_msgs::msg::OccupancyGrid>::SharedPtr map_sub_;
    rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr path_pub_;
    nav_msgs::msg::OccupancyGrid::SharedPtr map_;
    std::vector<bool> occupancy_grid_;
    int map_width_, map_height_;

    void mapCallback(const nav_msgs::msg::OccupancyGrid::SharedPtr map) {
        map_ = map;
        map_width_ = map_->info.width;
        map_height_ = map_->info.height;
        occupancy_grid_.assign(map_->data.begin(), map_->data.end());
        executeAStar();
    }

    void executeAStar() {
        std::priority_queue<Node, std::vector<Node>, CompareNode> open_list;
        std::unordered_map<int, int> path_tracker;

        int start_x = 0, start_y = 0, goal_x = map_width_ - 1, goal_y = map_height_ - 1;
        Node start_node(start_x, start_y, 0, heuristic(start_x, start_y, goal_x, goal_y));
        open_list.push(start_node);

        std::vector<int> g_cost(map_width_ * map_height_, INT_MAX);
        g_cost[start_y * map_width_ + start_x] = 0;

        const int moves[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        const int move_cost[8] = {10, 10, 10, 10, 14, 14, 14, 14};

        while (!open_list.empty()) {
            Node current = open_list.top();
            open_list.pop();

            if (current.x == goal_x && current.y == goal_y) {
                publishPath(path_tracker, goal_x, goal_y);
                return;
            }

            for (int i = 0; i < 8; ++i) {
                int next_x = current.x + moves[i][0], next_y = current.y + moves[i][1];
                if (!isValidCell(next_x, next_y)) continue;

                int next_index = next_y * map_width_ + next_x;
                int new_g = g_cost[current.y * map_width_ + current.x] + move_cost[i];

                if (new_g < g_cost[next_index]) {
                    g_cost[next_index] = new_g;
                    path_tracker[next_index] = current.y * map_width_ + current.x;
                    open_list.push(Node(next_x, next_y, new_g, heuristic(next_x, next_y, goal_x, goal_y)));
                }
            }
        }
        RCLCPP_WARN(this->get_logger(), "No feasible path found!");
    }

    bool isValidCell(int x, int y) const {
        return x >= 0 && x < map_width_ && y >= 0 && y < map_height_ && occupancy_grid_[y * map_width_ + x] == 0;
    }

    int heuristic(int x, int y, int goal_x, int goal_y) {
        return std::abs(x - goal_x) + std::abs(y - goal_y);
    }

    void publishPath(const std::unordered_map<int, int>& path_tracker, int goal_x, int goal_y) {
        auto path_msg = std::make_shared<nav_msgs::msg::Path>();
        path_msg->header.stamp = this->now();
        path_msg->header.frame_id = "map";

        int index = goal_y * map_width_ + goal_x;
        while (path_tracker.find(index) != path_tracker.end()) {
            int x = index % map_width_;
            int y = index / map_width_;
            geometry_msgs::msg::PoseStamped pose;
            pose.header = path_msg->header;
            pose.pose.position.x = x * map_->info.resolution + map_->info.origin.position.x;
            pose.pose.position.y = y * map_->info.resolution + map_->info.origin.position.y;
            path_msg->poses.push_back(pose);
            index = path_tracker.at(index);
        }

        std::reverse(path_msg->poses.begin(), path_msg->poses.end());
        path_pub_->publish(*path_msg);
        RCLCPP_INFO(this->get_logger(), "Path published with %zu waypoints.", path_msg->poses.size());
    }
};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<AStarPlanner>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}


*/



/*

#include <climits>
#include <rclcpp/rclcpp.hpp>
#include <nav_msgs/msg/occupancy_grid.hpp>
#include <nav_msgs/msg/path.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <queue>
#include <vector>
#include <unordered_map>
#include <cmath>

struct AStarSearchNode {
    int coordinate_x, coordinate_y, cost_g, cost_h;
    AStarSearchNode(int coordinate_x, int coordinate_y, int cost_g, int cost_h) 
        : coordinate_x(coordinate_x), coordinate_y(coordinate_y), cost_g(cost_g), cost_h(cost_h) {}
    int getTotalCostF() const { return cost_g + cost_h; }
};

struct CompareAStarNodes {
    bool operator()(const AStarSearchNode& node_a, const AStarSearchNode& node_b) {
        return node_a.getTotalCostF() > node_b.getTotalCostF();
    }
};

class AStarPathfindingPlanner : public rclcpp::Node {
public:
    AStarPathfindingPlanner() : Node("a_star_pathfinding_planner") {
        map_subscription_ = this->create_subscription<nav_msgs::msg::OccupancyGrid>(
            "/map", 10, std::bind(&AStarPathfindingPlanner::mapDataCallback, this, std::placeholders::_1));
        path_publisher_ = this->create_publisher<nav_msgs::msg::Path>("/generated_navigation_path", 10);
    }

private:
    rclcpp::Subscription<nav_msgs::msg::OccupancyGrid>::SharedPtr map_subscription_;
    rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr path_publisher_;
    nav_msgs::msg::OccupancyGrid::SharedPtr stored_map_data_;
    std::vector<bool> map_occupancy_grid_;
    int map_grid_width_, map_grid_height_;

    void mapDataCallback(const nav_msgs::msg::OccupancyGrid::SharedPtr received_map) {
        stored_map_data_ = received_map;
        map_grid_width_ = stored_map_data_->info.width;
        map_grid_height_ = stored_map_data_->info.height;
        map_occupancy_grid_.assign(stored_map_data_->data.begin(), stored_map_data_->data.end());
        executeAStarPathSearch();
    }

    void executeAStarPathSearch() {
        std::priority_queue<AStarSearchNode, std::vector<AStarSearchNode>, CompareAStarNodes> open_node_queue;
        std::unordered_map<int, int> path_reconstruction_map;

        int start_position_x = 0, start_position_y = 0;
        int target_position_x = map_grid_width_ - 1, target_position_y = map_grid_height_ - 1;
        AStarSearchNode initial_node(start_position_x, start_position_y, 0, calculateHeuristic(start_position_x, start_position_y, target_position_x, target_position_y));
        open_node_queue.push(initial_node);

        std::vector<int> movement_cost_grid(map_grid_width_ * map_grid_height_, INT_MAX);
        movement_cost_grid[start_position_y * map_grid_width_ + start_position_x] = 0;

        const int movement_directions[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        const int movement_costs[8] = {10, 10, 10, 10, 14, 14, 14, 14};

        while (!open_node_queue.empty()) {
            AStarSearchNode current_node = open_node_queue.top();
            open_node_queue.pop();

            if (current_node.coordinate_x == target_position_x && current_node.coordinate_y == target_position_y) {
                reconstructAndPublishPath(path_reconstruction_map, target_position_x, target_position_y);
                return;
            }

            for (int i = 0; i < 8; ++i) {
                int next_position_x = current_node.coordinate_x + movement_directions[i][0];
                int next_position_y = current_node.coordinate_y + movement_directions[i][1];
                if (!isCellValid(next_position_x, next_position_y)) continue;

                int next_index = next_position_y * map_grid_width_ + next_position_x;
                int new_cost_g = movement_cost_grid[current_node.coordinate_y * map_grid_width_ + current_node.coordinate_x] + movement_costs[i];

                if (new_cost_g < movement_cost_grid[next_index]) {
                    movement_cost_grid[next_index] = new_cost_g;
                    path_reconstruction_map[next_index] = current_node.coordinate_y * map_grid_width_ + current_node.coordinate_x;
                    open_node_queue.push(AStarSearchNode(next_position_x, next_position_y, new_cost_g, calculateHeuristic(next_position_x, next_position_y, target_position_x, target_position_y)));
                }
            }
        }
        RCLCPP_WARN(this->get_logger(), "Pathfinding failed: No valid path available!");
    }

    bool isCellValid(int x, int y) const {
        return x >= 0 && x < map_grid_width_ && y >= 0 && y < map_grid_height_ && map_occupancy_grid_[y * map_grid_width_ + x] == 0;
    }

    int calculateHeuristic(int x, int y, int goal_x, int goal_y) {
        return std::abs(x - goal_x) + std::abs(y - goal_y);
    }

    void reconstructAndPublishPath(const std::unordered_map<int, int>& path_reconstruction_map, int goal_x, int goal_y) {
        auto path_message = std::make_shared<nav_msgs::msg::Path>();
        path_message->header.stamp = this->now();
        path_message->header.frame_id = "map";

        int index = goal_y * map_grid_width_ + goal_x;
        while (path_reconstruction_map.find(index) != path_reconstruction_map.end()) {
            int x = index % map_grid_width_;
            int y = index / map_grid_width_;
            geometry_msgs::msg::PoseStamped waypoint;
            waypoint.header = path_message->header;
            waypoint.pose.position.x = x * stored_map_data_->info.resolution + stored_map_data_->info.origin.position.x;
            waypoint.pose.position.y = y * stored_map_data_->info.resolution + stored_map_data_->info.origin.position.y;
            path_message->poses.push_back(waypoint);
            index = path_reconstruction_map.at(index);
        }
        std::reverse(path_message->poses.begin(), path_message->poses.end());
        path_publisher_->publish(*path_message);
        RCLCPP_INFO(this->get_logger(), "Successfully published path with %zu waypoints.", path_message->poses.size());
    }
};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    auto planner_node = std::make_shared<AStarPathfindingPlanner>();
    rclcpp::spin(planner_node);
    rclcpp::shutdown();
    return 0;
}  
    
    
  
*/



/*
#include <climits>
#include <rclcpp/rclcpp.hpp>
#include <nav_msgs/msg/occupancy_grid.hpp>
#include <nav_msgs/msg/path.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <queue>
#include <vector>
#include <unordered_map>
#include <cmath>

struct AStarSearchNode {
    int coordinate_x, coordinate_y, cost_g, cost_h;
    AStarSearchNode(int x, int y, int g, int h) {
        coordinate_x = x;
        coordinate_y = y;
        cost_g = g;
        cost_h = h;
    }
    int getTotalCostF() const { return cost_g + cost_h; }
};

struct CompareAStarNodes {
    bool operator()(const AStarSearchNode& node_a, const AStarSearchNode& node_b) {
        return node_a.getTotalCostF() > node_b.getTotalCostF();
    }
};

class AStarPathfindingPlanner : public rclcpp::Node {
public:
    AStarPathfindingPlanner() : Node("a_star_pathfinding_planner") {
        map_subscription_ = this->create_subscription<nav_msgs::msg::OccupancyGrid>(
            "/map", 10, std::bind(&AStarPathfindingPlanner::mapDataCallback, this, std::placeholders::_1));
        path_publisher_ = this->create_publisher<nav_msgs::msg::Path>("/generated_navigation_path", 10);
    }

private:
    rclcpp::Subscription<nav_msgs::msg::OccupancyGrid>::SharedPtr map_subscription_;
    rclcpp::Publisher<nav_msgs::msg::Path>::SharedPtr path_publisher_;
    nav_msgs::msg::OccupancyGrid::SharedPtr stored_map_data_;
    std::vector<bool> map_occupancy_grid_;
    int map_grid_width_, map_grid_height_;

    void mapDataCallback(const nav_msgs::msg::OccupancyGrid::SharedPtr received_map) {
        stored_map_data_ = received_map;
        map_grid_width_ = stored_map_data_->info.width;
        map_grid_height_ = stored_map_data_->info.height;
        map_occupancy_grid_.assign(stored_map_data_->data.begin(), stored_map_data_->data.end());
        executeAStarPathSearch();
    }

    void executeAStarPathSearch() {
        std::priority_queue<AStarSearchNode, std::vector<AStarSearchNode>, CompareAStarNodes> open_node_queue;
        std::unordered_map<int, int> path_reconstruction_map;

        int start_position_x = 0, start_position_y = 0;
        int target_position_x = map_grid_width_ - 1, target_position_y = map_grid_height_ - 1;
        AStarSearchNode initial_node(start_position_x, start_position_y, 0, calculateHeuristic(start_position_x, start_position_y, target_position_x, target_position_y));
        open_node_queue.push(initial_node);

        std::vector<int> movement_cost_grid(map_grid_width_ * map_grid_height_, INT_MAX);
        movement_cost_grid[start_position_y * map_grid_width_ + start_position_x] = 0;

        const int movement_directions[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        const int movement_costs[8] = {10, 10, 10, 10, 14, 14, 14, 14};

        while (!open_node_queue.empty()) {
            AStarSearchNode current_node = open_node_queue.top();
            open_node_queue.pop();

            if (current_node.coordinate_x == target_position_x && current_node.coordinate_y == target_position_y) {
                reconstructAndPublishPath(path_reconstruction_map, target_position_x, target_position_y);
                return;
            }

            for (int i = 0; i < 8; ++i) {
                int next_position_x = current_node.coordinate_x + movement_directions[i][0];
                int next_position_y = current_node.coordinate_y + movement_directions[i][1];
                if (!isCellValid(next_position_x, next_position_y)) continue;

                int next_index = next_position_y * map_grid_width_ + next_position_x;
                int new_cost_g = movement_cost_grid[current_node.coordinate_y * map_grid_width_ + current_node.coordinate_x] + movement_costs[i];

                if (new_cost_g < movement_cost_grid[next_index]) {
                    movement_cost_grid[next_index] = new_cost_g;
                    path_reconstruction_map[next_index] = current_node.coordinate_y * map_grid_width_ + current_node.coordinate_x;
                    open_node_queue.push(AStarSearchNode(next_position_x, next_position_y, new_cost_g, calculateHeuristic(next_position_x, next_position_y, target_position_x, target_position_y)));
                }
            }
        }
        RCLCPP_WARN(this->get_logger(), "Pathfinding failed: No valid path available!");
    }

    bool isCellValid(int x, int y) const {
        return x >= 0 && x < map_grid_width_ && y >= 0 && y < map_grid_height_ && map_occupancy_grid_[y * map_grid_width_ + x] == 0;
    }

    int calculateHeuristic(int x, int y, int goal_x, int goal_y) {
        return std::abs(x - goal_x) + std::abs(y - goal_y);
    }

    void reconstructAndPublishPath(const std::unordered_map<int, int>& path_reconstruction_map, int goal_x, int goal_y) {
        auto path_message = std::make_shared<nav_msgs::msg::Path>();
        path_message->header.stamp = this->now();
        path_message->header.frame_id = "map";

        int index = goal_y * map_grid_width_ + goal_x;
        while (path_reconstruction_map.find(index) != path_reconstruction_map.end()) {
            int x = index % map_grid_width_;
            int y = index / map_grid_width_;
            geometry_msgs::msg::PoseStamped waypoint;
            waypoint.header = path_message->header;
            waypoint.pose.position.x = x * stored_map_data_->info.resolution + stored_map_data_->info.origin.position.x;
            waypoint.pose.position.y = y * stored_map_data_->info.resolution + stored_map_data_->info.origin.position.y;
            path_message->poses.push_back(waypoint);
            index = path_reconstruction_map.at(index);
        }
        std::reverse(path_message->poses.begin(), path_message->poses.end());
        path_publisher_->publish(*path_message);
        RCLCPP_INFO(this->get_logger(), "Successfully published path with %zu waypoints.", path_message->poses.size());
    }
};

int main(int argc, char** argv) {
    rclcpp::init(argc, argv);
    auto planner_node = std::make_shared<AStarPathfindingPlanner>();
    rclcpp::spin(planner_node);
    rclcpp::shutdown();
    return 0;
}
*/
